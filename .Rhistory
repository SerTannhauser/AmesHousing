#We should scale the data.
nutrient.scaled = as.data.frame(scale(nutrient))
summary(nutrient.scaled)
sapply(nutrient.scaled, sd)
#We need to calcualte the pairwise distances between observations.
d = dist(nutrient.scaled)
#Using the hclust() function, we define the linkage manner by which we will
#cluster our data.
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
#Creating various dendrograms.
par(mfrow = c(1, 3))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
#Cut the dendrogram into groups of data.
clusters.average = cutree(fit.average, k = 5)
clusters.average
#Viewing the groups of data.
table(clusters.average)
#Aggregating the original data by the cluster assignments.
aggregate(nutrient, by = list(cluster = clusters.average), median)
#Aggregating the scaled data by the cluster assignments.
aggregate(nutrient.scaled, by = list(cluster = clusters.average), median)
#Visualizing the groups in the dendrogram.
par(mfrow = c(1, 1))
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage\n5 Clusters")
rect.hclust(fit.average, k = 5)
#-Sardines form their own cluster and are much higher in calcium than the other
# food groups.
#-Beef heart is also a singleton and is high in protein and iron.
#-The clam cluster is low in protein and high in iron.
#-The items in the cluster containing beef roast to simmered pork are high in
# energy and fat.
#-The largest group (from mackerel to bluefish) is relatively low in iron.
set.seed(0)
km.pt1 = kmeans(protein.scaled, centers = 3)
km.pt2 = kmeans(protein.scaled, centers = 3)
km.pt3 = kmeans(protein.scaled, centers = 3)
km.pt4 = kmeans(protein.scaled, centers = 3)
km.pt5 = kmeans(protein.scaled, centers = 3)
set.seed(0)
km_100 = kmeans(protein.scaled, centers = 3, nstart = 100)
par(mfrow = c(2, 3))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km.pt1$cluster,
main = paste("Single K-Means Attempt #1\n WCV: ",
round(km.pt1$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km.pt2$cluster,
main = paste("Single K-Means Attempt #2\n WCV: ",
round(km.pt2$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km.pt3$cluster,
main = paste("Single K-Means Attempt #3\n WCV: ",
round(km.pt3$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km.pt4$cluster,
main = paste("Single K-Means Attempt #4\n WCV: ",
round(km.pt4$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km.pt5$cluster,
main = paste("Single K-Means Attempt #5\n WCV: ",
round(km.pt5$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "blue")
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "blue")
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "blue")
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "blue")
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")],
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "blue")
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")],
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 4], km_100$centers[, 2], pch = 16, col = "red")
par(mfrow = c(1, 1))
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
points(km.iris$centers[, 4], km.iris$centers[, 2], pch = 16, col = "blue")
plot(iris.scale$Petal.Width, iris.scale$Sepal.Width,
xlab = "Petal Width", ylab = "Sepal Width",
main = "Single K-Means Attempt", col = km.iris$cluster)
points(km.iris$centers[, 4], km.iris$centers[, 2], pch = 16, col = "blue")
km_100$centers
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")],
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
km_100$centers$RedMeat
km_100$centers[, 1]
km_100$centers
km_100$centers[,6]
km_100$centers
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")],
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
?points
km.iris$centers
plot(protein[, names(protein) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
km.iris$centers
plot(protein$Cereals, protein$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
plot(protein$Cereals, protein$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
par(mfrow = c(1, 1))
plot(protein$Cereals, protein$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
par(mfrow = c(1, 1))
plot(protein$Cereals, protein$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 1], km_100$centers[, 6], pch = 16, col = "blue")
par(mfrow = c(1, 1))
plot(protein$Cereals, protein$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
par(mfrow = c(2, 3))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km.pt1$cluster,
main = paste("Single K-Means Attempt #1\n WCV: ",
round(km.pt1$tot.withinss, 4)))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km.pt2$cluster,
main = paste("Single K-Means Attempt #2\n WCV: ",
round(km.pt2$tot.withinss, 4)))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km.pt3$cluster,
main = paste("Single K-Means Attempt #3\n WCV: ",
round(km.pt3$tot.withinss, 4)))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km.pt4$cluster,
main = paste("Single K-Means Attempt #4\n WCV: ",
round(km.pt4$tot.withinss, 4)))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km.pt5$cluster,
main = paste("Single K-Means Attempt #5\n WCV: ",
round(km.pt5$tot.withinss, 4)))
plot(protein.scaled[, names(protein.scaled) %in% c("Cereals", "RedMeat")], col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
?abline
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
View(protein.scaled)
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = text(rownames(protein.scaled))
main = paste("Best K-Means Attempt out of 100\n WCV: ",
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = text(rownames(protein.scaled)),
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(rownames(protein.scaled))
?plot
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n',
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n',
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
label = text(rownames(protein.scaled))
main = paste("Best K-Means Attempt out of 100\n WCV: ",
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
label = text(rownames(protein.scaled)),
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
label = text(rownames(protein.scaled)),
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
#text(rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
xlab = "Cereals", ylab = "Red Meat",
label = text(rownames(protein.scaled)),
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
#text(rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(label = rownames(protein.scaled))
par(mfrow = c(1, 1))
plot(protein.scaled$Cereals, protein.scaled$RedMeat, col = km_100$cluster,
type = 'n', xlab = "Cereals", ylab = "Red Meat",
main = paste("Best K-Means Attempt out of 100\n WCV: ",
round(km_100$tot.withinss, 4)))
points(km_100$centers[, 6], km_100$centers[, 1], pch = 16, col = "blue")
abline(h = 0)
abline(v = 0)
text(protein.scaled$Cereals,
protein.scaled$RedMeat, label = rownames(protein.scaled))
d = dist(protein.scaled)
d
fit.single = hclust(d, method = "single")
fit.complete = hclust(d, method = "complete")
fit.average = hclust(d, method = "average")
par(mfrow = c(1, 3))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
par(mfrow = c(3, 1))
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
plot(fit.single, hang = -1, main = "Dendrogram of Single Linkage")
plot(fit.complete, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average, hang = -1, main = "Dendrogram of Average Linkage")
# Single seems to "chain" or recursively nest many catagories
plot(fit.single1, hang = -1, main = "Dendrogram of Single Linkage")
fit.single1 = hclust(d, method = "single")
fit.complete1 = hclust(d, method = "complete")
fit.average1 = hclust(d, method = "average")
# Single seems to "chain" or recursively nest many catagories
plot(fit.single1, hang = -1, main = "Dendrogram of Single Linkage")
# complete
plot(fit.complete1, hang = -1, main = "Dendrogram of Complete Linkage")
plot(fit.average1, hang = -1, main = "Dendrogram of Average Linkage")
clusters.complete1 = cutree(fit.complete1, k = 5)
clusters.complete1
clusters.complete1 = cutree(fit.complete1, k = 2)
clusters.complete1
clusters.complete1 = cutree(fit.complete1, k = 2)
par(mfrow = c(1, 1))
plot(fit.complete1, hang = -1, main = "Dendrogram of Average Linkage\n2 Clusters")
rect.hclust(fit.complete1, k = 2)
clusters.complete1 = cutree(fit.complete1, k = 2)
par(mfrow = c(1, 1))
plot(fit.complete1, hang = -1, main = "Dendrogram of Average Linkage\n2 Clusters")
rect.hclust(fit.complete1, k = 2)
aggregate(protein.scaled, by = list(cluster = clusters.complete1), median)
clusters.complete2 = cutree(fit.complete1, k = 5)
par(mfrow = c(1, 1))
plot(fit.complete1, hang = -1, main = "Dendrogram of Average Linkage\n2 Clusters")
rect.hclust(fit.complete1, k = 5)
#diets are pretty anticorrelated across almost all categories. Group 1 eats
#more: Cereal, Nuts, Fresh veggies, and less of meat, eggs, milk, starch
aggregate(protein.scaled, by = list(cluster = clusters.complete2), median)
setwd("~/Data_Sci_2k18/AmesHousing")
getwd()
open("cleaning.r")
open(cleaning.r)
setwd(".")
getwd()
### load dependencies
library(readr)
### load dependencies
library(readr)
library(tidyverse)
library(psych)
### load raw data
train = read_csv("rawData/train.csv")
# check summary statistics
names(train)
summary(train)
# separate numerical and categorical variables
numerical = c("LotFrontage", "LotArea", "MasVnrArea", "BsmtFinSF1", "BsmtFinSF2",
"BsmtUnfSF", "TotalBsmtSF", "1stFlrSF", "2ndFlrSF", "LowQualFinSF",
"GrLivArea", "GarageArea", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal")
categorical = c("MSSubClass","MSZoning", "Street", "Alley", "LotShape",
"LandContour", "Utilities", "LotConfig", "LandSlope", "Neighborhood",
"Condition1", "Condition2", "BldgType", "HouseStyle", "OverallQual",
"OverallCond", "RoofStyle", "RoofMatl", "Exterior1st", "Exterior2nd",
"MasVnrType", "ExterQual", "ExterCond", "Foundation", "BsmtQual",
"BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Heating",
"HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional",
"FireplaceQu", "GarageType", "GarageFinish", "GarageQual", "GarageCond",
"PavedDrive", "PoolQC", "Fence", "MiscFeature", "SaleType", "SaleCondition")
# >>> variables that need to be discussed <<<
debatable = c("YearBuilt", "YearRemodAdd","BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "BedroomAbvGr", "KitchenAbvGr", "TotRmsAbvGrd", "Fireplaces",
"GarageYrBlt", "GarageCars", "MoSold", "YrSold")
# separate types for easier cleaning
train.numerical = train[,c("Id", numerical)]
train.categorical = train[,c("Id", categorical)]
train.debatable = train[,c("Id", debatable)]
sum(length(numerical), length(categorical), length(debatable))
# describe
describe(train[,numerical])
# check for columns containing NAs
colnames(train.categorical)[colSums(is.na(train.categorical)) > 0]
colnames(train.numerical)[colSums(is.na(train.numerical)) > 0]
colnames(train.debatable)[colSums(is.na(train.debatable)) > 0]
# look at each column with NAs
train.categorical %>% select(MasVnrType) %>% head(10)
# needs discussion >>> MasVnrType, MasVnrType, LotFrontage, GarageYrBlt <<<
# convert types
train.categorical$Alley[is.na(train.categorical$Alley)] = "None"
train.categorical$BsmtQual[is.na(train.categorical$BsmtQual)] = "No Bsmt"
train.categorical$BsmtCond[is.na(train.categorical$BsmtCond)] = "No Bsmt"
train.categorical$BsmtExposure[is.na(train.categorical$BsmtExposure)] = "No Bsmt"
train.categorical$BsmtFinType1[is.na(train.categorical$BsmtFinType1)] = "No Bsmt"
train.categorical$BsmtFinType2[is.na(train.categorical$BsmtFinType2)] = "No Bsmt"
train.categorical$FireplaceQu[is.na(train.categorical$FireplaceQu)] = "No FrPl"
train.categorical$GarageType[is.na(train.categorical$GarageType)] = "No Grge"
train.categorical$GarageFinish[is.na(train.categorical$GarageFinish)] = "No Grge"
train.categorical$GarageQual[is.na(train.categorical$GarageQual)] = "No Grge"
train.categorical$GarageCond[is.na(train.categorical$GarageCond)] = "No Grge"
train.categorical$PoolQC[is.na(train.categorical$PoolQC)] = "No Pool"
train.categorical$Fence[is.na(train.categorical$Fence)] = "No Fnce"
train.categorical$MiscFeature[is.na(train.categorical$MiscFeature)] = "None"
# convert factor
train.categorical = sapply(train.categorical, function(x) x = as.factor(x))
train.categorical = as.data.frame(train.categorical)
train.categorical$Id = as.character(train.categorical$Id)
### load dependencies
library(readr)
library(tidyverse)
library(psych)
### load raw data
train = read_csv("rawData/train.csv")
# check summary statistics
names(train)
summary(train)
# separate numerical and categorical variables
numerical = c("LotFrontage", "LotArea", "MasVnrArea", "BsmtFinSF1", "BsmtFinSF2",
"BsmtUnfSF", "TotalBsmtSF", "1stFlrSF", "2ndFlrSF", "LowQualFinSF",
"GrLivArea", "GarageArea", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal")
categorical = c("MSSubClass","MSZoning", "Street", "Alley", "LotShape",
"LandContour", "Utilities", "LotConfig", "LandSlope", "Neighborhood",
"Condition1", "Condition2", "BldgType", "HouseStyle", "OverallQual",
"OverallCond", "RoofStyle", "RoofMatl", "Exterior1st", "Exterior2nd",
"MasVnrType", "ExterQual", "ExterCond", "Foundation", "BsmtQual",
"BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Heating",
"HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional",
"FireplaceQu", "GarageType", "GarageFinish", "GarageQual", "GarageCond",
"PavedDrive", "PoolQC", "Fence", "MiscFeature", "SaleType", "SaleCondition")
# >>> variables that need to be discussed <<<
debatable = c("YearBuilt", "YearRemodAdd","BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "BedroomAbvGr", "KitchenAbvGr", "TotRmsAbvGrd", "Fireplaces",
"GarageYrBlt", "GarageCars", "MoSold", "YrSold")
# separate types for easier cleaning
train.numerical = train[,c("Id", numerical)]
train.categorical = train[,c("Id", categorical)]
train.debatable = train[,c("Id", debatable)]
sum(length(numerical), length(categorical), length(debatable))
# describe
describe(train[,numerical])
# check for columns containing NAs
colnames(train.categorical)[colSums(is.na(train.categorical)) > 0]
colnames(train.numerical)[colSums(is.na(train.numerical)) > 0]
colnames(train.debatable)[colSums(is.na(train.debatable)) > 0]
# look at each column with NAs
train.categorical %>% select(MasVnrType) %>% head(10)
# needs discussion >>> MasVnrType, MasVnrType, LotFrontage, GarageYrBlt <<<
# convert types
train.categorical$Alley[is.na(train.categorical$Alley)] = "None"
train.categorical$BsmtQual[is.na(train.categorical$BsmtQual)] = "No Bsmt"
train.categorical$BsmtCond[is.na(train.categorical$BsmtCond)] = "No Bsmt"
train.categorical$BsmtExposure[is.na(train.categorical$BsmtExposure)] = "No Bsmt"
train.categorical$BsmtFinType1[is.na(train.categorical$BsmtFinType1)] = "No Bsmt"
train.categorical$BsmtFinType2[is.na(train.categorical$BsmtFinType2)] = "No Bsmt"
train.categorical$FireplaceQu[is.na(train.categorical$FireplaceQu)] = "No FrPl"
train.categorical$GarageType[is.na(train.categorical$GarageType)] = "No Grge"
train.categorical$GarageFinish[is.na(train.categorical$GarageFinish)] = "No Grge"
train.categorical$GarageQual[is.na(train.categorical$GarageQual)] = "No Grge"
train.categorical$GarageCond[is.na(train.categorical$GarageCond)] = "No Grge"
train.categorical$PoolQC[is.na(train.categorical$PoolQC)] = "No Pool"
train.categorical$Fence[is.na(train.categorical$Fence)] = "No Fnce"
train.categorical$MiscFeature[is.na(train.categorical$MiscFeature)] = "None"
# convert factor
train.categorical = sapply(train.categorical, function(x) x = as.factor(x))
train.categorical = as.data.frame(train.categorical)
train.categorical$Id = as.character(train.categorical$Id)
install.packages("tidyverse")
### load dependencies
library(readr)
library(tidyverse)
library(psych)
### load raw data
train = read_csv("rawData/train.csv")
# check summary statistics
names(train)
summary(train)
# separate numerical and categorical variables
numerical = c("LotFrontage", "LotArea", "MasVnrArea", "BsmtFinSF1", "BsmtFinSF2",
"BsmtUnfSF", "TotalBsmtSF", "1stFlrSF", "2ndFlrSF", "LowQualFinSF",
"GrLivArea", "GarageArea", "WoodDeckSF", "OpenPorchSF", "EnclosedPorch",
"3SsnPorch", "ScreenPorch", "PoolArea", "MiscVal")
categorical = c("MSSubClass","MSZoning", "Street", "Alley", "LotShape",
"LandContour", "Utilities", "LotConfig", "LandSlope", "Neighborhood",
"Condition1", "Condition2", "BldgType", "HouseStyle", "OverallQual",
"OverallCond", "RoofStyle", "RoofMatl", "Exterior1st", "Exterior2nd",
"MasVnrType", "ExterQual", "ExterCond", "Foundation", "BsmtQual",
"BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "Heating",
"HeatingQC", "CentralAir", "Electrical", "KitchenQual", "Functional",
"FireplaceQu", "GarageType", "GarageFinish", "GarageQual", "GarageCond",
"PavedDrive", "PoolQC", "Fence", "MiscFeature", "SaleType", "SaleCondition")
# >>> variables that need to be discussed <<<
debatable = c("YearBuilt", "YearRemodAdd","BsmtFullBath", "BsmtHalfBath", "FullBath",
"HalfBath", "BedroomAbvGr", "KitchenAbvGr", "TotRmsAbvGrd", "Fireplaces",
"GarageYrBlt", "GarageCars", "MoSold", "YrSold")
# separate types for easier cleaning
train.numerical = train[,c("Id", numerical)]
train.categorical = train[,c("Id", categorical)]
train.debatable = train[,c("Id", debatable)]
sum(length(numerical), length(categorical), length(debatable))
# describe
describe(train[,numerical])
# check for columns containing NAs
colnames(train.categorical)[colSums(is.na(train.categorical)) > 0]
colnames(train.numerical)[colSums(is.na(train.numerical)) > 0]
colnames(train.debatable)[colSums(is.na(train.debatable)) > 0]
# look at each column with NAs
train.categorical %>% select(MasVnrType) %>% head(10)
# needs discussion >>> MasVnrType, MasVnrType, LotFrontage, GarageYrBlt <<<
# convert types
train.categorical$Alley[is.na(train.categorical$Alley)] = "None"
train.categorical$BsmtQual[is.na(train.categorical$BsmtQual)] = "No Bsmt"
train.categorical$BsmtCond[is.na(train.categorical$BsmtCond)] = "No Bsmt"
train.categorical$BsmtExposure[is.na(train.categorical$BsmtExposure)] = "No Bsmt"
train.categorical$BsmtFinType1[is.na(train.categorical$BsmtFinType1)] = "No Bsmt"
train.categorical$BsmtFinType2[is.na(train.categorical$BsmtFinType2)] = "No Bsmt"
train.categorical$FireplaceQu[is.na(train.categorical$FireplaceQu)] = "No FrPl"
train.categorical$GarageType[is.na(train.categorical$GarageType)] = "No Grge"
train.categorical$GarageFinish[is.na(train.categorical$GarageFinish)] = "No Grge"
train.categorical$GarageQual[is.na(train.categorical$GarageQual)] = "No Grge"
train.categorical$GarageCond[is.na(train.categorical$GarageCond)] = "No Grge"
train.categorical$PoolQC[is.na(train.categorical$PoolQC)] = "No Pool"
train.categorical$Fence[is.na(train.categorical$Fence)] = "No Fnce"
train.categorical$MiscFeature[is.na(train.categorical$MiscFeature)] = "None"
# convert factor
train.categorical = sapply(train.categorical, function(x) x = as.factor(x))
train.categorical = as.data.frame(train.categorical)
train.categorical$Id = as.character(train.categorical$Id)
